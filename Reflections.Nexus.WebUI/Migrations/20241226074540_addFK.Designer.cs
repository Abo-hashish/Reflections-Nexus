// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reflections.Nexus.WebUI.Data;

#nullable disable

namespace Reflections.Nexus.WebUI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241226074540_addFK")]
    partial class addFK
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Code.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "System Administrator",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Configration",
                            Name = "Configuration",
                            NormalizedName = "CONFIGURATION"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Operation",
                            Name = "Operations",
                            NormalizedName = "OPERATIONS"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Reports",
                            Name = "Reports",
                            NormalizedName = "REPORTS"
                        },
                        new
                        {
                            Id = 5,
                            Description = "User",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Code.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd1dc9a-82ab-4a62-be70-e80e201573af",
                            Email = "admin@system.com",
                            EmailConfirmed = true,
                            FirstName = "Super",
                            IsActive = true,
                            LastName = "Administrator",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@SYSTEM.COM",
                            NormalizedUserName = "ADMIN@SYSTEM.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMYgoo+Nk8o2o7R8s6Wa5TxKAEO1ytTcZhrL1YQHHWVY3DEeBqGd9PLAy91c1pVAig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "VENUWRKWC2VPS67PRJBL26YK52EMR2L3",
                            TwoFactorEnabled = false,
                            UserName = "admin@system.com"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__City__3214EC276A5C1E8A");

                    b.HasIndex(new[] { "CountryId" }, "IX_City_CountryId");

                    b.ToTable("City");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            IsActive = false,
                            Name = "Cairo"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            IsActive = false,
                            Name = "Giza"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            IsActive = false,
                            Name = "Alexandria"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            IsActive = false,
                            Name = "Hurghada"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("CommercialRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(110)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(120);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("EstablishDate")
                        .HasColumnType("date");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("LogoURL");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(150);

                    b.Property<string>("TaxRegistrationNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(130)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(140);

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id")
                        .HasName("PK__Company__3214EC27621FACBE");

                    b.HasIndex(new[] { "CityId" }, "IX_Company_CityId");

                    b.HasIndex(new[] { "CompanyTypeId" }, "IX_Company_CompanyType");

                    b.HasIndex(new[] { "CountryId" }, "IX_Company_CountryId");

                    b.HasIndex(new[] { "IndustryId" }, "IX_Company_IndustryId");

                    b.HasIndex(new[] { "ParentId" }, "IX_Company_ParentId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(110)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(120);

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(150);

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(130)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(140);

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("Id")
                        .HasName("PK__CompanyF__3214EC074A53B7CC");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyFiles_CompanyId");

                    b.HasIndex(new[] { "FileTypeId" }, "IX_CompanyFiles_FileTypeId");

                    b.ToTable("CompanyFiles");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("CompanyFileType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "CompanyRegistration"
                        },
                        new
                        {
                            Id = 2,
                            Value = "TaxID"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyTelephoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_CompanyTelephoneNumber_CompanyId");

                    b.HasIndex(new[] { "TypeId" }, "IX_CompanyTelephoneNumber_TypeId");

                    b.ToTable("CompanyTelephoneNumber");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__CompanyT__3214EC27FDF325DB");

                    b.ToTable("CompanyType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Headquarter"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Franchise"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Regional Office"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = false,
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = false,
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = false,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(110)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(120);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(150);

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(130)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(140);

                    b.HasKey("Id")
                        .HasName("PK__Departme__3214EC0735C0FED9");

                    b.HasIndex(new[] { "CompanyId" }, "IX_Department_CompanyId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Department_ManagerId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExitDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalInsurance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("MilitaryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<int>("WorkingModelId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Employee__3214EC07F195CECB");

                    b.HasIndex(new[] { "CityId" }, "IX_Employee_CityId");

                    b.HasIndex(new[] { "EmploymentTypeId" }, "IX_Employee_EmploymentTypeId");

                    b.HasIndex(new[] { "GenderId" }, "IX_Employee_GenderId");

                    b.HasIndex(new[] { "IdentificationTypeId" }, "IX_Employee_IdentificationTypeId");

                    b.HasIndex(new[] { "JobTitleId" }, "IX_Employee_JobTitleId");

                    b.HasIndex(new[] { "JobTypeId" }, "IX_Employee_JobTypeId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_Employee_ManagerId");

                    b.HasIndex(new[] { "MaritalStatusId" }, "IX_Employee_MaritalStatusId");

                    b.HasIndex(new[] { "MilitaryStatusId" }, "IX_Employee_MilitaryStatusId");

                    b.HasIndex(new[] { "NationalityId" }, "IX_Employee_NationalityId");

                    b.HasIndex(new[] { "WorkingModelId" }, "IX_Employee_WorkingModelId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(110)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(120);

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("FileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("FileURL");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(150);

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnOrder(130)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(140);

                    b.HasKey("Id")
                        .HasName("PK__Employee__3214EC27C74AC7F2");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_EmployeeFiles_EmployeeId");

                    b.HasIndex(new[] { "FileTypeId" }, "IX_EmployeeFiles_FileTypeId");

                    b.ToTable("EmployeeFiles");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeFileType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeFileType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "National ID"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Birth Certificate"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Bachelor Certificate"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Passport"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_EmployeeRequest_EmployeeId");

                    b.HasIndex(new[] { "NotificationId" }, "IX_EmployeeRequest_NotificationId");

                    b.HasIndex(new[] { "StatusId" }, "IX_EmployeeRequest_StatusId");

                    b.ToTable("EmployeeRequest");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeTelephoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_EmployeeTelephoneNumber_EmployeeId");

                    b.HasIndex(new[] { "TypeId" }, "IX_EmployeeTelephoneNumber_TypeId");

                    b.ToTable("EmployeeTelephoneNumber");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmploymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EmploymentType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Internship"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Contract"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Freelance"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Temporary"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("Id");

                    b.ToTable("Gender");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Female"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.HeadCountItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnOrder(110)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(120);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("FromDepartmentJobTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("FromWorkingModelId")
                        .HasColumnType("int");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("HeadCountTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("HrcheckBy")
                        .HasColumnType("int")
                        .HasColumnName("HRCheckBy");

                    b.Property<DateTime?>("HrcheckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("HRCheckDate");

                    b.Property<string>("Identification")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdentificationTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ItcheckBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ItcheckDate")
                        .HasColumnType("datetime")
                        .HasColumnName("ITCheckDate");

                    b.Property<int>("JobTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoiningDate")
                        .HasColumnType("date");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("MedicalInsurance")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("MilitaryStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NationalityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnOrder(150);

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<int?>("ToDepartmentJobTitleId")
                        .HasColumnType("int");

                    b.Property<int?>("ToWorkingModelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Updated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasColumnOrder(130)
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("UpdatedBy")
                        .HasColumnType("int")
                        .HasColumnOrder(140);

                    b.HasKey("Id")
                        .HasName("PK__HeadCoun__3214EC07F31532E4");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("FromDepartmentJobTitleId");

                    b.HasIndex("FromWorkingModelId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ToDepartmentJobTitleId");

                    b.HasIndex("ToWorkingModelId");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_HeadCountItem_EmployeeId");

                    b.HasIndex(new[] { "GenderId" }, "IX_HeadCountItem_GenderId");

                    b.HasIndex(new[] { "HeadCountTypeId" }, "IX_HeadCountItem_HeadCountTypeId");

                    b.HasIndex(new[] { "IdentificationTypeId" }, "IX_HeadCountItem_IdentificationTypeId");

                    b.HasIndex(new[] { "JobTypeId" }, "IX_HeadCountItem_JobTypeId");

                    b.HasIndex(new[] { "ManagerId" }, "IX_HeadCountItem_ManagerId");

                    b.HasIndex(new[] { "MaritalStatusId" }, "IX_HeadCountItem_MaritalStatusId");

                    b.HasIndex(new[] { "MilitaryStatusId" }, "IX_HeadCountItem_MilitaryStatusId");

                    b.ToTable("HeadCountItem");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.HeadCountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("HeadCountType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Promote"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Hire"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Fire"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Transfer"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Retire"
                        },
                        new
                        {
                            Id = 6,
                            Value = "Resign"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.IdentificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Identifi__3214EC077151D407");

                    b.ToTable("IdentificationType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "National ID"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Passport"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Industry__3214EC27D6683BAD");

                    b.ToTable("Industry");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Technology"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Retail"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Healthcare"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Education"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Marketing"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.JobTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DepartmentId" }, "IX_JobTitle_DepartmentId");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.JobType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("JobType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Part-Time"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Full-Time"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Flexible"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__MatrialS__3214EC0707AF5D45");

                    b.ToTable("MaritalStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Married"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Single"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Divorced"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Widowed"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.MilitaryStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Military__3214EC2797640630");

                    b.ToTable("MilitaryStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Exempted"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Reserved"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Active Duty"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Postponed"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime");

                    b.HasKey("Id")
                        .HasName("PK_Activities");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.PhoneNumberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PhoneNumberType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Personal"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Home"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.RequestStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("RequestStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Accepted"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Rejected"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Pending"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.SocialLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("SocialTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CompanyId" }, "IX_SocialLinks_CompanyId");

                    b.HasIndex(new[] { "SocialTypeId" }, "IX_SocialLinks_SocialTypeId");

                    b.ToTable("SocialLinks");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.SocialLinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__SocialLi__3214EC079574A20A");

                    b.ToTable("SocialLinkType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "Linkedin"
                        },
                        new
                        {
                            Id = 2,
                            Value = "DevOps"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Facebook"
                        },
                        new
                        {
                            Id = 4,
                            Value = "Youtube"
                        },
                        new
                        {
                            Id = 5,
                            Value = "Instagram"
                        },
                        new
                        {
                            Id = 6,
                            Value = "TikTok"
                        });
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.WorkingModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__WorkingM__3214EC275B84BC05");

                    b.ToTable("WorkingModel");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Value = "On-Site"
                        },
                        new
                        {
                            Id = 2,
                            Value = "Online"
                        },
                        new
                        {
                            Id = 3,
                            Value = "Hybrid"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Code.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Code.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Code.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Code.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reflections.Nexus.WebUI.Code.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Code.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.City", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .IsRequired()
                        .HasConstraintName("FK_City_Country");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Company", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_City");

                    b.HasOne("Reflections.Nexus.WebUI.Models.CompanyType", "CompanyType")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_CompanyType1");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Industry", "Industry")
                        .WithMany("Companies")
                        .HasForeignKey("IndustryId")
                        .IsRequired()
                        .HasConstraintName("FK_Company_Industry");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Company", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Company_Company");

                    b.Navigation("City");

                    b.Navigation("CompanyType");

                    b.Navigation("Industry");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyFile", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Company", "Company")
                        .WithMany("CompanyFiles")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyFiles_Company");

                    b.HasOne("Reflections.Nexus.WebUI.Models.CompanyFileType", "FileType")
                        .WithMany("CompanyFiles")
                        .HasForeignKey("FileTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyFiles_CompanyFileType");

                    b.Navigation("Company");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyTelephoneNumber", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Company", "Company")
                        .WithMany("CompanyTelephoneNumbers")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyTelephoneNumber_Company");

                    b.HasOne("Reflections.Nexus.WebUI.Models.PhoneNumberType", "Type")
                        .WithMany("CompanyTelephoneNumbers")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_CompanyTelephoneNumber_PhoneNumberType");

                    b.Navigation("Company");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Department", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Company", "Company")
                        .WithMany("Departments")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_Department_Company");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Manager")
                        .WithMany("Departments")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Department_Employee");

                    b.Navigation("Company");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Employee", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.City", "City")
                        .WithMany("Employees")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_City");

                    b.HasOne("Reflections.Nexus.WebUI.Models.EmploymentType", "EmploymentType")
                        .WithMany("Employees")
                        .HasForeignKey("EmploymentTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_EmploymentType");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Gender", "Gender")
                        .WithMany("Employees")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Gender");

                    b.HasOne("Reflections.Nexus.WebUI.Models.IdentificationType", "IdentificationType")
                        .WithMany("Employees")
                        .HasForeignKey("IdentificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Identification");

                    b.HasOne("Reflections.Nexus.WebUI.Models.JobTitle", "JobTitle")
                        .WithMany("Employees")
                        .HasForeignKey("JobTitleId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_JobTitle");

                    b.HasOne("Reflections.Nexus.WebUI.Models.JobType", "JobType")
                        .WithMany("Employees")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_JobType");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Manager")
                        .WithMany("InverseManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_Employee_Employee");

                    b.HasOne("Reflections.Nexus.WebUI.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("Employees")
                        .HasForeignKey("MaritalStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_MatrialStatus");

                    b.HasOne("Reflections.Nexus.WebUI.Models.MilitaryStatus", "MilitaryStatus")
                        .WithMany("Employees")
                        .HasForeignKey("MilitaryStatusId")
                        .HasConstraintName("FK_Employee_MilitaryStatus");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Country", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_Nationality");

                    b.HasOne("Reflections.Nexus.WebUI.Models.WorkingModel", "WorkingModel")
                        .WithMany("Employees")
                        .HasForeignKey("WorkingModelId")
                        .IsRequired()
                        .HasConstraintName("FK_Employee_WorkingModel");

                    b.Navigation("City");

                    b.Navigation("EmploymentType");

                    b.Navigation("Gender");

                    b.Navigation("IdentificationType");

                    b.Navigation("JobTitle");

                    b.Navigation("JobType");

                    b.Navigation("Manager");

                    b.Navigation("MaritalStatus");

                    b.Navigation("MilitaryStatus");

                    b.Navigation("Nationality");

                    b.Navigation("WorkingModel");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeFile", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Employee")
                        .WithMany("EmployeeFiles")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeFiles_Employee");

                    b.HasOne("Reflections.Nexus.WebUI.Models.EmployeeFileType", "FileType")
                        .WithMany("EmployeeFiles")
                        .HasForeignKey("FileTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeFiles_EmployeeFileType");

                    b.Navigation("Employee");

                    b.Navigation("FileType");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeRequest", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Employee")
                        .WithMany("EmployeeRequests")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeRequest_Employee");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Notification", "Notification")
                        .WithMany("EmployeeRequests")
                        .HasForeignKey("NotificationId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeRequest_Notification");

                    b.HasOne("Reflections.Nexus.WebUI.Models.RequestStatus", "Status")
                        .WithMany("EmployeeRequests")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeRequest_RequestStatus");

                    b.Navigation("Employee");

                    b.Navigation("Notification");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeTelephoneNumber", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Employee")
                        .WithMany("EmployeeTelephoneNumbers")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_PhoneNumber_EmployeeId");

                    b.HasOne("Reflections.Nexus.WebUI.Models.PhoneNumberType", "Type")
                        .WithMany("EmployeeTelephoneNumbers")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EmployeeTelephoneNumber_PhoneNumberType");

                    b.Navigation("Employee");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.HeadCountItem", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Employee")
                        .WithMany("HeadCountItemEmployees")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_HeadCountItem_Employee");

                    b.HasOne("Reflections.Nexus.WebUI.Models.EmploymentType", "EmploymentType")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("EmploymentTypeId")
                        .HasConstraintName("FK_HeadCountItem_EmploymentType");

                    b.HasOne("Reflections.Nexus.WebUI.Models.JobTitle", "FromDepartmentJobTitle")
                        .WithMany("HeadCountItemFromDepartmentJobTitles")
                        .HasForeignKey("FromDepartmentJobTitleId")
                        .HasConstraintName("FK_HeadCountItem_FromDepartmentJobTitle");

                    b.HasOne("Reflections.Nexus.WebUI.Models.WorkingModel", "FromWorkingModel")
                        .WithMany("HeadCountItemFromWorkingModels")
                        .HasForeignKey("FromWorkingModelId")
                        .HasConstraintName("FK_HeadCountItem_FromWorkingModel");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Gender", "Gender")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("GenderId")
                        .IsRequired()
                        .HasConstraintName("FK_HeadCountItem_Gender");

                    b.HasOne("Reflections.Nexus.WebUI.Models.HeadCountType", "HeadCountType")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("HeadCountTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_HeadCountItem_HeadCountType");

                    b.HasOne("Reflections.Nexus.WebUI.Models.IdentificationType", "IdentificationType")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("IdentificationTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_HeadCountItem_IdentificationType");

                    b.HasOne("Reflections.Nexus.WebUI.Models.JobType", "JobType")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_HeadCountItem_JobType");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Employee", "Manager")
                        .WithMany("HeadCountItemManagers")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_HeadCountItem_Manager");

                    b.HasOne("Reflections.Nexus.WebUI.Models.MaritalStatus", "MaritalStatus")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("MaritalStatusId")
                        .IsRequired()
                        .HasConstraintName("FK_HeadCountItem_MaritalStatus");

                    b.HasOne("Reflections.Nexus.WebUI.Models.MilitaryStatus", "MilitaryStatus")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("MilitaryStatusId")
                        .HasConstraintName("FK_HeadCountItem_MilitaryStatus");

                    b.HasOne("Reflections.Nexus.WebUI.Models.Country", "Nationality")
                        .WithMany("HeadCountItems")
                        .HasForeignKey("NationalityId")
                        .IsRequired()
                        .HasConstraintName("FK_HeadCountItem_Nationality");

                    b.HasOne("Reflections.Nexus.WebUI.Models.JobTitle", "ToDepartmentJobTitle")
                        .WithMany("HeadCountItemToDepartmentJobTitles")
                        .HasForeignKey("ToDepartmentJobTitleId")
                        .HasConstraintName("FK_HeadCountItem_ToDepartment");

                    b.HasOne("Reflections.Nexus.WebUI.Models.WorkingModel", "ToWorkingModel")
                        .WithMany("HeadCountItemToWorkingModels")
                        .HasForeignKey("ToWorkingModelId")
                        .HasConstraintName("FK_HeadCountItem_ToWorkingModel");

                    b.Navigation("Employee");

                    b.Navigation("EmploymentType");

                    b.Navigation("FromDepartmentJobTitle");

                    b.Navigation("FromWorkingModel");

                    b.Navigation("Gender");

                    b.Navigation("HeadCountType");

                    b.Navigation("IdentificationType");

                    b.Navigation("JobType");

                    b.Navigation("Manager");

                    b.Navigation("MaritalStatus");

                    b.Navigation("MilitaryStatus");

                    b.Navigation("Nationality");

                    b.Navigation("ToDepartmentJobTitle");

                    b.Navigation("ToWorkingModel");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.JobTitle", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Department", "Department")
                        .WithMany("JobTitles")
                        .HasForeignKey("DepartmentId")
                        .IsRequired()
                        .HasConstraintName("FK_JobTitle_Department");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.SocialLink", b =>
                {
                    b.HasOne("Reflections.Nexus.WebUI.Models.Company", "Company")
                        .WithMany("SocialLinks")
                        .HasForeignKey("CompanyId")
                        .IsRequired()
                        .HasConstraintName("FK_SocialLinks_Company");

                    b.HasOne("Reflections.Nexus.WebUI.Models.SocialLinkType", "SocialType")
                        .WithMany("SocialLinks")
                        .HasForeignKey("SocialTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_SocialLinks_SocialLinkType");

                    b.Navigation("Company");

                    b.Navigation("SocialType");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.City", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Company", b =>
                {
                    b.Navigation("CompanyFiles");

                    b.Navigation("CompanyTelephoneNumbers");

                    b.Navigation("Departments");

                    b.Navigation("InverseParent");

                    b.Navigation("SocialLinks");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyFileType", b =>
                {
                    b.Navigation("CompanyFiles");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.CompanyType", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Department", b =>
                {
                    b.Navigation("JobTitles");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Employee", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("EmployeeFiles");

                    b.Navigation("EmployeeRequests");

                    b.Navigation("EmployeeTelephoneNumbers");

                    b.Navigation("HeadCountItemEmployees");

                    b.Navigation("HeadCountItemManagers");

                    b.Navigation("InverseManager");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmployeeFileType", b =>
                {
                    b.Navigation("EmployeeFiles");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.EmploymentType", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Gender", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.HeadCountType", b =>
                {
                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.IdentificationType", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Industry", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.JobTitle", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItemFromDepartmentJobTitles");

                    b.Navigation("HeadCountItemToDepartmentJobTitles");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.JobType", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.MaritalStatus", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.MilitaryStatus", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItems");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.Notification", b =>
                {
                    b.Navigation("EmployeeRequests");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.PhoneNumberType", b =>
                {
                    b.Navigation("CompanyTelephoneNumbers");

                    b.Navigation("EmployeeTelephoneNumbers");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.RequestStatus", b =>
                {
                    b.Navigation("EmployeeRequests");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.SocialLinkType", b =>
                {
                    b.Navigation("SocialLinks");
                });

            modelBuilder.Entity("Reflections.Nexus.WebUI.Models.WorkingModel", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("HeadCountItemFromWorkingModels");

                    b.Navigation("HeadCountItemToWorkingModels");
                });
#pragma warning restore 612, 618
        }
    }
}
