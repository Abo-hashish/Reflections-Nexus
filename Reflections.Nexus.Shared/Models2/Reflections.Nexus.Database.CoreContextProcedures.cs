// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using Reflections.Nexus.Shared.Models2;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace Reflections.Nexus.Shared.Models2
{
    public partial class Reflections.Nexus.Database.Core.Context
    {
        private IReflections.Nexus.Database.Core.ContextProcedures _procedures;

        public virtual IReflections.Nexus.Database.Core.ContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new Reflections.Nexus.Database.Core.ContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IReflections.Nexus.Database.Core.ContextProcedures GetProcedures()
        {
            return Procedures;
        }
    }

    public partial class Reflections.Nexus.Database.Core.ContextProcedures : IReflections.Nexus.Database.Core.ContextProcedures
    {
        private readonly Reflections.Nexus.Database.Core.Context _context;

        public Reflections.Nexus.Database.Core.ContextProcedures(Reflections.Nexus.Database.Core.Context context)
        {
            _context = context;
        }

        public virtual async Task<List<AuditDeleteResult>> AuditDeleteAsync(int? AuditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditId",
                    Value = AuditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditDeleteResult>("EXEC @returnValue = [dbo].[AuditDelete] @AuditId = @AuditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditInsertResult>> AuditInsertAsync(string ObjectName, int? RecordId, string PropertyName, string OldValue, string NewValue, byte? AuditType, int? CreatedBy, OutputParameter<int?> AuditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAuditId = new SqlParameter
            {
                ParameterName = "AuditId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AuditId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterAuditId,
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RecordId",
                    Value = RecordId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyName",
                    Size = 255,
                    Value = PropertyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OldValue",
                    Size = 0,
                    Value = OldValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewValue",
                    Size = 0,
                    Value = NewValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditType",
                    Value = AuditType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditInsertResult>("EXEC @returnValue = [dbo].[AuditInsert] @AuditId = @AuditId OUTPUT, @ObjectName = @ObjectName, @RecordId = @RecordId, @PropertyName = @PropertyName, @OldValue = @OldValue, @NewValue = @NewValue, @AuditType = @AuditType, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            AuditId.SetValue(parameterAuditId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectDeleteResult>> AuditObjectDeleteAsync(int? AuditObjectId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectDeleteResult>("EXEC @returnValue = [dbo].[AuditObjectDelete] @AuditObjectId = @AuditObjectId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectInsertResult>> AuditObjectInsertAsync(string ObjectName, string ObjectFullyQualifiedName, int? CreatedBy, OutputParameter<int?> AuditObjectId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAuditObjectId = new SqlParameter
            {
                ParameterName = "AuditObjectId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AuditObjectId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterAuditObjectId,
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectFullyQualifiedName",
                    Size = 255,
                    Value = ObjectFullyQualifiedName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectInsertResult>("EXEC @returnValue = [dbo].[AuditObjectInsert] @AuditObjectId = @AuditObjectId OUTPUT, @ObjectName = @ObjectName, @ObjectFullyQualifiedName = @ObjectFullyQualifiedName, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            AuditObjectId.SetValue(parameterAuditObjectId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertyDeleteResult>> AuditObjectPropertyDeleteAsync(int? AuditObjectPropertyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectPropertyId",
                    Value = AuditObjectPropertyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertyDeleteResult>("EXEC @returnValue = [dbo].[AuditObjectPropertyDelete] @AuditObjectPropertyId = @AuditObjectPropertyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertyDeleteByAuditObjectIdResult>> AuditObjectPropertyDeleteByAuditObjectIdAsync(int? AuditObjectId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertyDeleteByAuditObjectIdResult>("EXEC @returnValue = [dbo].[AuditObjectPropertyDeleteByAuditObjectId] @AuditObjectId = @AuditObjectId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertyInsertResult>> AuditObjectPropertyInsertAsync(int? AuditObjectId, string PropertyName, int? CreatedBy, OutputParameter<int?> AuditObjectPropertyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterAuditObjectPropertyId = new SqlParameter
            {
                ParameterName = "AuditObjectPropertyId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = AuditObjectPropertyId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterAuditObjectPropertyId,
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyName",
                    Size = 255,
                    Value = PropertyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertyInsertResult>("EXEC @returnValue = [dbo].[AuditObjectPropertyInsert] @AuditObjectPropertyId = @AuditObjectPropertyId OUTPUT, @AuditObjectId = @AuditObjectId, @PropertyName = @PropertyName, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            AuditObjectPropertyId.SetValue(parameterAuditObjectPropertyId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertySelectAllResult>> AuditObjectPropertySelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertySelectAllResult>("EXEC @returnValue = [dbo].[AuditObjectPropertySelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertySelectByAuditObjectIdResult>> AuditObjectPropertySelectByAuditObjectIdAsync(int? AuditObjectId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertySelectByAuditObjectIdResult>("EXEC @returnValue = [dbo].[AuditObjectPropertySelectByAuditObjectId] @AuditObjectId = @AuditObjectId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertySelectByIdResult>> AuditObjectPropertySelectByIdAsync(int? AuditObjectPropertyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectPropertyId",
                    Value = AuditObjectPropertyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertySelectByIdResult>("EXEC @returnValue = [dbo].[AuditObjectPropertySelectById] @AuditObjectPropertyId = @AuditObjectPropertyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectPropertyUpdateResult>> AuditObjectPropertyUpdateAsync(int? AuditObjectPropertyId, int? AuditObjectId, string PropertyName, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectPropertyId",
                    Value = AuditObjectPropertyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyName",
                    Size = 255,
                    Value = PropertyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectPropertyUpdateResult>("EXEC @returnValue = [dbo].[AuditObjectPropertyUpdate] @AuditObjectPropertyId = @AuditObjectPropertyId, @AuditObjectId = @AuditObjectId, @PropertyName = @PropertyName, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectSelectAllResult>> AuditObjectSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectSelectAllResult>("EXEC @returnValue = [dbo].[AuditObjectSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectSelectByIdResult>> AuditObjectSelectByIdAsync(int? AuditObjectId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectSelectByIdResult>("EXEC @returnValue = [dbo].[AuditObjectSelectById] @AuditObjectId = @AuditObjectId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectSelectByObjectNameResult>> AuditObjectSelectByObjectNameAsync(string ObjectName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectSelectByObjectNameResult>("EXEC @returnValue = [dbo].[AuditObjectSelectByObjectName] @ObjectName = @ObjectName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditObjectUpdateResult>> AuditObjectUpdateAsync(int? AuditObjectId, string ObjectName, string ObjectFullyQualifiedName, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditObjectId",
                    Value = AuditObjectId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectFullyQualifiedName",
                    Size = 255,
                    Value = ObjectFullyQualifiedName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditObjectUpdateResult>("EXEC @returnValue = [dbo].[AuditObjectUpdate] @AuditObjectId = @AuditObjectId, @ObjectName = @ObjectName, @ObjectFullyQualifiedName = @ObjectFullyQualifiedName, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditSelectAllResult>> AuditSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditSelectAllResult>("EXEC @returnValue = [dbo].[AuditSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditSelectByIdResult>> AuditSelectByIdAsync(int? AuditId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditId",
                    Value = AuditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditSelectByIdResult>("EXEC @returnValue = [dbo].[AuditSelectById] @AuditId = @AuditId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<AuditUpdateResult>> AuditUpdateAsync(int? AuditId, string ObjectName, int? RecordId, string PropertyName, string OldValue, string NewValue, byte? AuditType, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "AuditId",
                    Value = AuditId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "RecordId",
                    Value = RecordId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyName",
                    Size = 255,
                    Value = PropertyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "OldValue",
                    Size = 0,
                    Value = OldValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "NewValue",
                    Size = 0,
                    Value = NewValue ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "AuditType",
                    Value = AuditType ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<AuditUpdateResult>("EXEC @returnValue = [dbo].[AuditUpdate] @AuditId = @AuditId, @ObjectName = @ObjectName, @RecordId = @RecordId, @PropertyName = @PropertyName, @OldValue = @OldValue, @NewValue = @NewValue, @AuditType = @AuditType, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CapabilitySelectAllResult>> CapabilitySelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CapabilitySelectAllResult>("EXEC @returnValue = [dbo].[CapabilitySelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<CapabilitySelectByIdResult>> CapabilitySelectByIdAsync(int? CapabilityId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "CapabilityId",
                    Value = CapabilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<CapabilitySelectByIdResult>("EXEC @returnValue = [dbo].[CapabilitySelectById] @CapabilityId = @CapabilityId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmailDeleteResult>> EmailDeleteAsync(int? EmailId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailId",
                    Value = EmailId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmailDeleteResult>("EXEC @returnValue = [dbo].[EmailDelete] @EmailId = @EmailId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmailInsertResult>> EmailInsertAsync(string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, string FromEmailAddress, string Subject, string Body, byte? EmailStatusFlag, int? CreatedBy, OutputParameter<int?> EmailId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterEmailId = new SqlParameter
            {
                ParameterName = "EmailId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = EmailId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterEmailId,
                new SqlParameter
                {
                    ParameterName = "ToEmailAddress",
                    Size = 0,
                    Value = ToEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CCEmailAddress",
                    Size = 0,
                    Value = CCEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BCCEmailAddress",
                    Size = 0,
                    Value = BCCEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromEmailAddress",
                    Size = 255,
                    Value = FromEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 0,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Body",
                    Size = 0,
                    Value = Body ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmailStatusFlag",
                    Value = EmailStatusFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmailInsertResult>("EXEC @returnValue = [dbo].[EmailInsert] @EmailId = @EmailId OUTPUT, @ToEmailAddress = @ToEmailAddress, @CCEmailAddress = @CCEmailAddress, @BCCEmailAddress = @BCCEmailAddress, @FromEmailAddress = @FromEmailAddress, @Subject = @Subject, @Body = @Body, @EmailStatusFlag = @EmailStatusFlag, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            EmailId.SetValue(parameterEmailId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmailSelectAllResult>> EmailSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmailSelectAllResult>("EXEC @returnValue = [dbo].[EmailSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmailSelectByEmailStatusFlagResult>> EmailSelectByEmailStatusFlagAsync(byte? EmailStatusFlag, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailStatusFlag",
                    Value = EmailStatusFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmailSelectByEmailStatusFlagResult>("EXEC @returnValue = [dbo].[EmailSelectByEmailStatusFlag] @EmailStatusFlag = @EmailStatusFlag", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmailSelectByIdResult>> EmailSelectByIdAsync(int? EmailId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailId",
                    Value = EmailId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmailSelectByIdResult>("EXEC @returnValue = [dbo].[EmailSelectById] @EmailId = @EmailId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<EmailUpdateResult>> EmailUpdateAsync(int? EmailId, string ToEmailAddress, string CCEmailAddress, string BCCEmailAddress, string FromEmailAddress, string Subject, string Body, byte? EmailStatusFlag, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "EmailId",
                    Value = EmailId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ToEmailAddress",
                    Size = 0,
                    Value = ToEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CCEmailAddress",
                    Size = 0,
                    Value = CCEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "BCCEmailAddress",
                    Size = 0,
                    Value = BCCEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromEmailAddress",
                    Size = 255,
                    Value = FromEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 0,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Body",
                    Size = 0,
                    Value = Body ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "EmailStatusFlag",
                    Value = EmailStatusFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<EmailUpdateResult>("EXEC @returnValue = [dbo].[EmailUpdate] @EmailId = @EmailId, @ToEmailAddress = @ToEmailAddress, @CCEmailAddress = @CCEmailAddress, @BCCEmailAddress = @BCCEmailAddress, @FromEmailAddress = @FromEmailAddress, @Subject = @Subject, @Body = @Body, @EmailStatusFlag = @EmailStatusFlag, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<HolidayDeleteResult>> HolidayDeleteAsync(int? HolidayId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HolidayId",
                    Value = HolidayId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HolidayDeleteResult>("EXEC @returnValue = [dbo].[HolidayDelete] @HolidayId = @HolidayId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<HolidayInsertResult>> HolidayInsertAsync(string HolidayName, DateTime? HolidayDate, int? CreatedBy, OutputParameter<int?> HolidayId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterHolidayId = new SqlParameter
            {
                ParameterName = "HolidayId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = HolidayId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterHolidayId,
                new SqlParameter
                {
                    ParameterName = "HolidayName",
                    Size = 50,
                    Value = HolidayName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HolidayDate",
                    Value = HolidayDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HolidayInsertResult>("EXEC @returnValue = [dbo].[HolidayInsert] @HolidayId = @HolidayId OUTPUT, @HolidayName = @HolidayName, @HolidayDate = @HolidayDate, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            HolidayId.SetValue(parameterHolidayId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<HolidaySelectAllResult>> HolidaySelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HolidaySelectAllResult>("EXEC @returnValue = [dbo].[HolidaySelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<HolidaySelectByIdResult>> HolidaySelectByIdAsync(int? HolidayId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HolidayId",
                    Value = HolidayId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HolidaySelectByIdResult>("EXEC @returnValue = [dbo].[HolidaySelectById] @HolidayId = @HolidayId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<HolidayUpdateResult>> HolidayUpdateAsync(int? HolidayId, string HolidayName, DateTime? HolidayDate, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "HolidayId",
                    Value = HolidayId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "HolidayName",
                    Size = 50,
                    Value = HolidayName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "HolidayDate",
                    Value = HolidayDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<HolidayUpdateResult>("EXEC @returnValue = [dbo].[HolidayUpdate] @HolidayId = @HolidayId, @HolidayName = @HolidayName, @HolidayDate = @HolidayDate, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<MenuItemSelectAllResult>> MenuItemSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<MenuItemSelectAllResult>("EXEC @returnValue = [dbo].[MenuItemSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationDeleteResult>> NotificationDeleteAsync(int? NotificationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationDeleteResult>("EXEC @returnValue = [dbo].[NotificationDelete] @NotificationId = @NotificationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationInsertResult>> NotificationInsertAsync(string Description, string FromEmailAddress, string Subject, string Body, int? CreatedBy, OutputParameter<int?> NotificationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNotificationId = new SqlParameter
            {
                ParameterName = "NotificationId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NotificationId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterNotificationId,
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromEmailAddress",
                    Size = 100,
                    Value = FromEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 0,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Body",
                    Size = 0,
                    Value = Body ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationInsertResult>("EXEC @returnValue = [dbo].[NotificationInsert] @NotificationId = @NotificationId OUTPUT, @Description = @Description, @FromEmailAddress = @FromEmailAddress, @Subject = @Subject, @Body = @Body, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            NotificationId.SetValue(parameterNotificationId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationSelectAllResult>> NotificationSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationSelectAllResult>("EXEC @returnValue = [dbo].[NotificationSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationSelectByIdResult>> NotificationSelectByIdAsync(int? NotificationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationSelectByIdResult>("EXEC @returnValue = [dbo].[NotificationSelectById] @NotificationId = @NotificationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationSelectByIdUserAccountIdResult>> NotificationSelectByIdUserAccountIdAsync(int? NotificationId, int? UserAccountid, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountid",
                    Value = UserAccountid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationSelectByIdUserAccountIdResult>("EXEC @returnValue = [dbo].[NotificationSelectByIdUserAccountId] @NotificationId = @NotificationId, @UserAccountid = @UserAccountid", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUpdateResult>> NotificationUpdateAsync(int? NotificationId, string Description, string FromEmailAddress, string Subject, string Body, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromEmailAddress",
                    Size = 100,
                    Value = FromEmailAddress ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Subject",
                    Size = 0,
                    Value = Subject ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Body",
                    Size = 0,
                    Value = Body ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUpdateResult>("EXEC @returnValue = [dbo].[NotificationUpdate] @NotificationId = @NotificationId, @Description = @Description, @FromEmailAddress = @FromEmailAddress, @Subject = @Subject, @Body = @Body, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountDeleteResult>> NotificationUserAccountDeleteAsync(int? NotificationUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountDeleteResult>("EXEC @returnValue = [dbo].[NotificationUserAccountDelete] @NotificationUserAccountId = @NotificationUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountInsertResult>> NotificationUserAccountInsertAsync(int? NotificationId, int? UserAccountId, int? CreatedBy, OutputParameter<int?> NotificationUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNotificationUserAccountId = new SqlParameter
            {
                ParameterName = "NotificationUserAccountId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NotificationUserAccountId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterNotificationUserAccountId,
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountInsertResult>("EXEC @returnValue = [dbo].[NotificationUserAccountInsert] @NotificationUserAccountId = @NotificationUserAccountId OUTPUT, @NotificationId = @NotificationId, @UserAccountId = @UserAccountId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            NotificationUserAccountId.SetValue(parameterNotificationUserAccountId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountSelectAllResult>> NotificationUserAccountSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountSelectAllResult>("EXEC @returnValue = [dbo].[NotificationUserAccountSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountSelectByIdResult>> NotificationUserAccountSelectByIdAsync(int? NotificationUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountSelectByIdResult>("EXEC @returnValue = [dbo].[NotificationUserAccountSelectById] @NotificationUserAccountId = @NotificationUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountSelectByUserAccountIdResult>> NotificationUserAccountSelectByUserAccountIdAsync(int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountSelectByUserAccountIdResult>("EXEC @returnValue = [dbo].[NotificationUserAccountSelectByUserAccountId] @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountSelectByWorkFlowStateIdResult>> NotificationUserAccountSelectByWorkFlowStateIdAsync(int? WorkFlowStateId, int? NotificationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountSelectByWorkFlowStateIdResult>("EXEC @returnValue = [dbo].[NotificationUserAccountSelectByWorkFlowStateId] @WorkFlowStateId = @WorkFlowStateId, @NotificationId = @NotificationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationUserAccountUpdateResult>> NotificationUserAccountUpdateAsync(int? NotificationUserAccountId, int? NotificationId, int? UserAccountId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationUserAccountUpdateResult>("EXEC @returnValue = [dbo].[NotificationUserAccountUpdate] @NotificationUserAccountId = @NotificationUserAccountId, @NotificationId = @NotificationId, @UserAccountId = @UserAccountId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateDeleteResult>> NotificationWorkFlowStateDeleteAsync(int? NotificationWorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationWorkFlowStateId",
                    Value = NotificationWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateDeleteResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateDelete] @NotificationWorkFlowStateId = @NotificationWorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateDeleteByNotificationUserAccountIdResult>> NotificationWorkFlowStateDeleteByNotificationUserAccountIdAsync(int? NotificationUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateDeleteByNotificationUserAccountIdResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateDeleteByNotificationUserAccountId] @NotificationUserAccountId = @NotificationUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateInsertResult>> NotificationWorkFlowStateInsertAsync(int? NotificationUserAccountId, int? WorkFlowStateId, int? CreatedBy, OutputParameter<int?> NotificationWorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterNotificationWorkFlowStateId = new SqlParameter
            {
                ParameterName = "NotificationWorkFlowStateId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = NotificationWorkFlowStateId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterNotificationWorkFlowStateId,
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateInsertResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateInsert] @NotificationWorkFlowStateId = @NotificationWorkFlowStateId OUTPUT, @NotificationUserAccountId = @NotificationUserAccountId, @WorkFlowStateId = @WorkFlowStateId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            NotificationWorkFlowStateId.SetValue(parameterNotificationWorkFlowStateId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateSelectAllResult>> NotificationWorkFlowStateSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateSelectAllResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateSelectByIdResult>> NotificationWorkFlowStateSelectByIdAsync(int? NotificationWorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationWorkFlowStateId",
                    Value = NotificationWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateSelectByIdResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateSelectById] @NotificationWorkFlowStateId = @NotificationWorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateSelectByNotificationUserAccountIdResult>> NotificationWorkFlowStateSelectByNotificationUserAccountIdAsync(int? NotificationUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateSelectByNotificationUserAccountIdResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateSelectByNotificationUserAccountId] @NotificationUserAccountId = @NotificationUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateSelectByWorkFlowStateIdResult>> NotificationWorkFlowStateSelectByWorkFlowStateIdAsync(int? WorkFlowStateId, int? NotificationId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationId",
                    Value = NotificationId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateSelectByWorkFlowStateIdResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateSelectByWorkFlowStateId] @WorkFlowStateId = @WorkFlowStateId, @NotificationId = @NotificationId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<NotificationWorkFlowStateUpdateResult>> NotificationWorkFlowStateUpdateAsync(int? NotificationWorkFlowStateId, int? NotificationUserAccountId, int? WorkFlowStateId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "NotificationWorkFlowStateId",
                    Value = NotificationWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "NotificationUserAccountId",
                    Value = NotificationUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<NotificationWorkFlowStateUpdateResult>("EXEC @returnValue = [dbo].[NotificationWorkFlowStateUpdate] @NotificationWorkFlowStateId = @NotificationWorkFlowStateId, @NotificationUserAccountId = @NotificationUserAccountId, @WorkFlowStateId = @WorkFlowStateId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffDayTypeSelectAllResult>> PaidTimeOffDayTypeSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffDayTypeSelectAllResult>("EXEC @returnValue = [dbo].[PaidTimeOffDayTypeSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffDayTypeSelectByIdResult>> PaidTimeOffDayTypeSelectByIdAsync(int? PaidTimeOffDayTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffDayTypeId",
                    Value = PaidTimeOffDayTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffDayTypeSelectByIdResult>("EXEC @returnValue = [dbo].[PaidTimeOffDayTypeSelectById] @PaidTimeOffDayTypeId = @PaidTimeOffDayTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestDeleteResult>> PaidTimeOffRequestDeleteAsync(int? PaidTimeOffRequestId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestId",
                    Value = PaidTimeOffRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestDeleteResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestDelete] @PaidTimeOffRequestId = @PaidTimeOffRequestId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestInsertResult>> PaidTimeOffRequestInsertAsync(int? UserAccountId, DateTime? RequestDate, int? PaidTimeOffDayTypeId, int? PaidTimeOffRequestTypeId, int? CreatedBy, OutputParameter<int?> PaidTimeOffRequestId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPaidTimeOffRequestId = new SqlParameter
            {
                ParameterName = "PaidTimeOffRequestId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PaidTimeOffRequestId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterPaidTimeOffRequestId,
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RequestDate",
                    Value = RequestDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffDayTypeId",
                    Value = PaidTimeOffDayTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestTypeId",
                    Value = PaidTimeOffRequestTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestInsertResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestInsert] @PaidTimeOffRequestId = @PaidTimeOffRequestId OUTPUT, @UserAccountId = @UserAccountId, @RequestDate = @RequestDate, @PaidTimeOffDayTypeId = @PaidTimeOffDayTypeId, @PaidTimeOffRequestTypeId = @PaidTimeOffRequestTypeId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            PaidTimeOffRequestId.SetValue(parameterPaidTimeOffRequestId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestSelectAllResult>> PaidTimeOffRequestSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestSelectAllResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestSelectByCurrentOwnerResult>> PaidTimeOffRequestSelectByCurrentOwnerAsync(int? UserAccountId, string WorkFlowObjectName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowObjectName",
                    Size = 255,
                    Value = WorkFlowObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestSelectByCurrentOwnerResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestSelectByCurrentOwner] @UserAccountId = @UserAccountId, @WorkFlowObjectName = @WorkFlowObjectName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestSelectByIdResult>> PaidTimeOffRequestSelectByIdAsync(int? PaidTimeOffRequestId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestId",
                    Value = PaidTimeOffRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestSelectByIdResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestSelectById] @PaidTimeOffRequestId = @PaidTimeOffRequestId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestSelectByUserAccountIdResult>> PaidTimeOffRequestSelectByUserAccountIdAsync(int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestSelectByUserAccountIdResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestSelectByUserAccountId] @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestSelectByUserAccountIdYearResult>> PaidTimeOffRequestSelectByUserAccountIdYearAsync(int? PaidTimeOffRequestId, int? UserAccountId, short? VacationYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestId",
                    Value = PaidTimeOffRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VacationYear",
                    Value = VacationYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestSelectByUserAccountIdYearResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestSelectByUserAccountIdYear] @PaidTimeOffRequestId = @PaidTimeOffRequestId, @UserAccountId = @UserAccountId, @VacationYear = @VacationYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestSelectPreviousByUserAccountIdResult>> PaidTimeOffRequestSelectPreviousByUserAccountIdAsync(int? PaidTimeOffRequestId, int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestId",
                    Value = PaidTimeOffRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestSelectPreviousByUserAccountIdResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestSelectPreviousByUserAccountId] @PaidTimeOffRequestId = @PaidTimeOffRequestId, @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestTypeSelectAllResult>> PaidTimeOffRequestTypeSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestTypeSelectAllResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestTypeSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestTypeSelectByIdResult>> PaidTimeOffRequestTypeSelectByIdAsync(int? PaidTimeOffRequestTypeId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestTypeId",
                    Value = PaidTimeOffRequestTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestTypeSelectByIdResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestTypeSelectById] @PaidTimeOffRequestTypeId = @PaidTimeOffRequestTypeId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestUpdateResult>> PaidTimeOffRequestUpdateAsync(int? PaidTimeOffRequestId, int? UserAccountId, DateTime? RequestDate, int? PaidTimeOffDayTypeId, int? PaidTimeOffRequestTypeId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestId",
                    Value = PaidTimeOffRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RequestDate",
                    Value = RequestDate ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.DateTime,
                },
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffDayTypeId",
                    Value = PaidTimeOffDayTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestTypeId",
                    Value = PaidTimeOffRequestTypeId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestUpdateResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestUpdate] @PaidTimeOffRequestId = @PaidTimeOffRequestId, @UserAccountId = @UserAccountId, @RequestDate = @RequestDate, @PaidTimeOffDayTypeId = @PaidTimeOffDayTypeId, @PaidTimeOffRequestTypeId = @PaidTimeOffRequestTypeId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffRequestUpdateCancelledResult>> PaidTimeOffRequestUpdateCancelledAsync(int? PaidTimeOffRequestId, bool? Cancelled, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffRequestId",
                    Value = PaidTimeOffRequestId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "Cancelled",
                    Value = Cancelled ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffRequestUpdateCancelledResult>("EXEC @returnValue = [dbo].[PaidTimeOffRequestUpdateCancelled] @PaidTimeOffRequestId = @PaidTimeOffRequestId, @Cancelled = @Cancelled", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankCopyYearResult>> PaidTimeOffVacationBankCopyYearAsync(short? FromYear, short? ToYear, int? CreatedBy, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromYear",
                    Value = FromYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "ToYear",
                    Value = ToYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankCopyYearResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankCopyYear] @FromYear = @FromYear, @ToYear = @ToYear, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankDeleteResult>> PaidTimeOffVacationBankDeleteAsync(int? PaidTimeOffVacationBankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffVacationBankId",
                    Value = PaidTimeOffVacationBankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankDeleteResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankDelete] @PaidTimeOffVacationBankId = @PaidTimeOffVacationBankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankInsertResult>> PaidTimeOffVacationBankInsertAsync(int? UserAccountId, short? VacationYear, byte? PersonalDays, byte? VacationDays, int? CreatedBy, OutputParameter<int?> PaidTimeOffVacationBankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterPaidTimeOffVacationBankId = new SqlParameter
            {
                ParameterName = "PaidTimeOffVacationBankId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = PaidTimeOffVacationBankId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterPaidTimeOffVacationBankId,
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VacationYear",
                    Value = VacationYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalDays",
                    Value = PersonalDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "VacationDays",
                    Value = VacationDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankInsertResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankInsert] @PaidTimeOffVacationBankId = @PaidTimeOffVacationBankId OUTPUT, @UserAccountId = @UserAccountId, @VacationYear = @VacationYear, @PersonalDays = @PersonalDays, @VacationDays = @VacationDays, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            PaidTimeOffVacationBankId.SetValue(parameterPaidTimeOffVacationBankId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankIsDuplicateResult>> PaidTimeOffVacationBankIsDuplicateAsync(int? PaidTimeOffVacationBankId, int? UserAccountId, short? VacationYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffVacationBankId",
                    Value = PaidTimeOffVacationBankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VacationYear",
                    Value = VacationYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankIsDuplicateResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankIsDuplicate] @PaidTimeOffVacationBankId = @PaidTimeOffVacationBankId, @UserAccountId = @UserAccountId, @VacationYear = @VacationYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankSelectAllResult>> PaidTimeOffVacationBankSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankSelectAllResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankSelectByIdResult>> PaidTimeOffVacationBankSelectByIdAsync(int? PaidTimeOffVacationBankId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffVacationBankId",
                    Value = PaidTimeOffVacationBankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankSelectByIdResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankSelectById] @PaidTimeOffVacationBankId = @PaidTimeOffVacationBankId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankSelectByUserAccountIdYearResult>> PaidTimeOffVacationBankSelectByUserAccountIdYearAsync(int? UserAccountid, short? VacationYear, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountid",
                    Value = UserAccountid ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VacationYear",
                    Value = VacationYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankSelectByUserAccountIdYearResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankSelectByUserAccountIdYear] @UserAccountid = @UserAccountid, @VacationYear = @VacationYear", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankSelectDistinctYearsResult>> PaidTimeOffVacationBankSelectDistinctYearsAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankSelectDistinctYearsResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankSelectDistinctYears]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<PaidTimeOffVacationBankUpdateResult>> PaidTimeOffVacationBankUpdateAsync(int? PaidTimeOffVacationBankId, int? UserAccountId, short? VacationYear, byte? PersonalDays, byte? VacationDays, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "PaidTimeOffVacationBankId",
                    Value = PaidTimeOffVacationBankId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "VacationYear",
                    Value = VacationYear ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.SmallInt,
                },
                new SqlParameter
                {
                    ParameterName = "PersonalDays",
                    Value = PersonalDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "VacationDays",
                    Value = VacationDays ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<PaidTimeOffVacationBankUpdateResult>("EXEC @returnValue = [dbo].[PaidTimeOffVacationBankUpdate] @PaidTimeOffVacationBankId = @PaidTimeOffVacationBankId, @UserAccountId = @UserAccountId, @VacationYear = @VacationYear, @PersonalDays = @PersonalDays, @VacationDays = @VacationDays, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<Report_RoleCapabilityResult>> Report_RoleCapabilityAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Report_RoleCapabilityResult>("EXEC @returnValue = [dbo].[Report_RoleCapability]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportAuditResult>> ReportAuditAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportAuditResult>("EXEC @returnValue = [dbo].[ReportAudit]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportDeleteResult>> ReportDeleteAsync(int? ReportId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportId",
                    Value = ReportId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportDeleteResult>("EXEC @returnValue = [dbo].[ReportDelete] @ReportId = @ReportId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportInsertResult>> ReportInsertAsync(string ReportName, string FileName, string ObjectName, string Description, string SubReportObjectName, string SubReportMethodName, int? CreatedBy, OutputParameter<int?> ReportId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterReportId = new SqlParameter
            {
                ParameterName = "ReportId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = ReportId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterReportId,
                new SqlParameter
                {
                    ParameterName = "ReportName",
                    Size = 50,
                    Value = ReportName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FileName",
                    Size = 255,
                    Value = FileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubReportObjectName",
                    Size = 255,
                    Value = SubReportObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubReportMethodName",
                    Size = 50,
                    Value = SubReportMethodName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportInsertResult>("EXEC @returnValue = [dbo].[ReportInsert] @ReportId = @ReportId OUTPUT, @ReportName = @ReportName, @FileName = @FileName, @ObjectName = @ObjectName, @Description = @Description, @SubReportObjectName = @SubReportObjectName, @SubReportMethodName = @SubReportMethodName, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            ReportId.SetValue(parameterReportId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportMyPaidTimeOffRequestsResult>> ReportMyPaidTimeOffRequestsAsync(string WorkFlowObjectName, int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowObjectName",
                    Size = 255,
                    Value = WorkFlowObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportMyPaidTimeOffRequestsResult>("EXEC @returnValue = [dbo].[ReportMyPaidTimeOffRequests] @WorkFlowObjectName = @WorkFlowObjectName, @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportRoleCapabilityResult>> ReportRoleCapabilityAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportRoleCapabilityResult>("EXEC @returnValue = [dbo].[ReportRoleCapability]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportRoleUserAccountResult>> ReportRoleUserAccountAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportRoleUserAccountResult>("EXEC @returnValue = [dbo].[ReportRoleUserAccount]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportSelectAllResult>> ReportSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportSelectAllResult>("EXEC @returnValue = [dbo].[ReportSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportSelectByIdResult>> ReportSelectByIdAsync(int? ReportId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportId",
                    Value = ReportId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportSelectByIdResult>("EXEC @returnValue = [dbo].[ReportSelectById] @ReportId = @ReportId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<ReportUpdateResult>> ReportUpdateAsync(int? ReportId, string ReportName, string FileName, string ObjectName, string Description, string SubReportObjectName, string SubReportMethodName, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "ReportId",
                    Value = ReportId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ReportName",
                    Size = 50,
                    Value = ReportName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FileName",
                    Size = 255,
                    Value = FileName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "ObjectName",
                    Size = 255,
                    Value = ObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubReportObjectName",
                    Size = 255,
                    Value = SubReportObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "SubReportMethodName",
                    Size = 50,
                    Value = SubReportMethodName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<ReportUpdateResult>("EXEC @returnValue = [dbo].[ReportUpdate] @ReportId = @ReportId, @ReportName = @ReportName, @FileName = @FileName, @ObjectName = @ObjectName, @Description = @Description, @SubReportObjectName = @SubReportObjectName, @SubReportMethodName = @SubReportMethodName, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleCapabilityDeleteResult>> RoleCapabilityDeleteAsync(int? RoleCapabilityId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleCapabilityId",
                    Value = RoleCapabilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleCapabilityDeleteResult>("EXEC @returnValue = [dbo].[RoleCapabilityDelete] @RoleCapabilityId = @RoleCapabilityId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleCapabilityInsertResult>> RoleCapabilityInsertAsync(int? RoleId, int? CapabilityId, byte? AccessFlag, int? CreatedBy, OutputParameter<int?> RoleCapabilityId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRoleCapabilityId = new SqlParameter
            {
                ParameterName = "RoleCapabilityId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RoleCapabilityId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterRoleCapabilityId,
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CapabilityId",
                    Value = CapabilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccessFlag",
                    Value = AccessFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleCapabilityInsertResult>("EXEC @returnValue = [dbo].[RoleCapabilityInsert] @RoleCapabilityId = @RoleCapabilityId OUTPUT, @RoleId = @RoleId, @CapabilityId = @CapabilityId, @AccessFlag = @AccessFlag, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            RoleCapabilityId.SetValue(parameterRoleCapabilityId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleCapabilitySelectAllResult>> RoleCapabilitySelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleCapabilitySelectAllResult>("EXEC @returnValue = [dbo].[RoleCapabilitySelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleCapabilitySelectByIdResult>> RoleCapabilitySelectByIdAsync(int? RoleCapabilityId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleCapabilityId",
                    Value = RoleCapabilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleCapabilitySelectByIdResult>("EXEC @returnValue = [dbo].[RoleCapabilitySelectById] @RoleCapabilityId = @RoleCapabilityId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleCapabilitySelectByRoleIdResult>> RoleCapabilitySelectByRoleIdAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleCapabilitySelectByRoleIdResult>("EXEC @returnValue = [dbo].[RoleCapabilitySelectByRoleId] @RoleId = @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleCapabilityUpdateResult>> RoleCapabilityUpdateAsync(int? RoleCapabilityId, int? RoleId, int? CapabilityId, byte? AccessFlag, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleCapabilityId",
                    Value = RoleCapabilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CapabilityId",
                    Value = CapabilityId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccessFlag",
                    Value = AccessFlag ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.TinyInt,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleCapabilityUpdateResult>("EXEC @returnValue = [dbo].[RoleCapabilityUpdate] @RoleCapabilityId = @RoleCapabilityId, @RoleId = @RoleId, @CapabilityId = @CapabilityId, @AccessFlag = @AccessFlag, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleDeleteResult>> RoleDeleteAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleDeleteResult>("EXEC @returnValue = [dbo].[RoleDelete] @RoleId = @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleInsertResult>> RoleInsertAsync(string RoleName, int? CreatedBy, OutputParameter<int?> RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRoleId = new SqlParameter
            {
                ParameterName = "RoleId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RoleId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterRoleId,
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 50,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleInsertResult>("EXEC @returnValue = [dbo].[RoleInsert] @RoleId = @RoleId OUTPUT, @RoleName = @RoleName, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            RoleId.SetValue(parameterRoleId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleSelectAllResult>> RoleSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleSelectAllResult>("EXEC @returnValue = [dbo].[RoleSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleSelectByIdResult>> RoleSelectByIdAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleSelectByIdResult>("EXEC @returnValue = [dbo].[RoleSelectById] @RoleId = @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleSelectByUserAccountIdResult>> RoleSelectByUserAccountIdAsync(int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleSelectByUserAccountIdResult>("EXEC @returnValue = [dbo].[RoleSelectByUserAccountId] @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUpdateResult>> RoleUpdateAsync(int? RoleId, string RoleName, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoleName",
                    Size = 50,
                    Value = RoleName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUpdateResult>("EXEC @returnValue = [dbo].[RoleUpdate] @RoleId = @RoleId, @RoleName = @RoleName, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUserAccountDeleteResult>> RoleUserAccountDeleteAsync(int? RoleUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleUserAccountId",
                    Value = RoleUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUserAccountDeleteResult>("EXEC @returnValue = [dbo].[RoleUserAccountDelete] @RoleUserAccountId = @RoleUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUserAccountInsertResult>> RoleUserAccountInsertAsync(int? RoleId, int? UserAccountId, int? CreatedBy, OutputParameter<int?> RoleUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterRoleUserAccountId = new SqlParameter
            {
                ParameterName = "RoleUserAccountId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = RoleUserAccountId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterRoleUserAccountId,
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUserAccountInsertResult>("EXEC @returnValue = [dbo].[RoleUserAccountInsert] @RoleUserAccountId = @RoleUserAccountId OUTPUT, @RoleId = @RoleId, @UserAccountId = @UserAccountId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            RoleUserAccountId.SetValue(parameterRoleUserAccountId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUserAccountSelectAllResult>> RoleUserAccountSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUserAccountSelectAllResult>("EXEC @returnValue = [dbo].[RoleUserAccountSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUserAccountSelectByIdResult>> RoleUserAccountSelectByIdAsync(int? RoleUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleUserAccountId",
                    Value = RoleUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUserAccountSelectByIdResult>("EXEC @returnValue = [dbo].[RoleUserAccountSelectById] @RoleUserAccountId = @RoleUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUserAccountSelectByRoleIdResult>> RoleUserAccountSelectByRoleIdAsync(int? RoleId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUserAccountSelectByRoleIdResult>("EXEC @returnValue = [dbo].[RoleUserAccountSelectByRoleId] @RoleId = @RoleId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<RoleUserAccountUpdateResult>> RoleUserAccountUpdateAsync(int? RoleUserAccountId, int? RoleId, int? UserAccountId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "RoleUserAccountId",
                    Value = RoleUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RoleId",
                    Value = RoleId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<RoleUserAccountUpdateResult>("EXEC @returnValue = [dbo].[RoleUserAccountUpdate] @RoleUserAccountId = @RoleUserAccountId, @RoleId = @RoleId, @UserAccountId = @UserAccountId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserAccountDeleteResult>> UserAccountDeleteAsync(int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserAccountDeleteResult>("EXEC @returnValue = [dbo].[UserAccountDelete] @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserAccountInsertResult>> UserAccountInsertAsync(string AccountName, string FirstName, string LastName, string Email, bool? IsActive, int? CreatedBy, OutputParameter<int?> UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterUserAccountId = new SqlParameter
            {
                ParameterName = "UserAccountId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = UserAccountId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterUserAccountId,
                new SqlParameter
                {
                    ParameterName = "AccountName",
                    Size = 50,
                    Value = AccountName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 50,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 50,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 100,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserAccountInsertResult>("EXEC @returnValue = [dbo].[UserAccountInsert] @UserAccountId = @UserAccountId OUTPUT, @AccountName = @AccountName, @FirstName = @FirstName, @LastName = @LastName, @Email = @Email, @IsActive = @IsActive, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            UserAccountId.SetValue(parameterUserAccountId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserAccountSelectAllResult>> UserAccountSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserAccountSelectAllResult>("EXEC @returnValue = [dbo].[UserAccountSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserAccountSelectByIdResult>> UserAccountSelectByIdAsync(int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserAccountSelectByIdResult>("EXEC @returnValue = [dbo].[UserAccountSelectById] @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserAccountSelectByWorkFlowOwnerGroupIdResult>> UserAccountSelectByWorkFlowOwnerGroupIdAsync(int? WorkFlowOwnerGroupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserAccountSelectByWorkFlowOwnerGroupIdResult>("EXEC @returnValue = [dbo].[UserAccountSelectByWorkFlowOwnerGroupId] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<UserAccountUpdateResult>> UserAccountUpdateAsync(int? UserAccountId, string AccountName, string FirstName, string LastName, string Email, bool? IsActive, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "AccountName",
                    Size = 50,
                    Value = AccountName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FirstName",
                    Size = 50,
                    Value = FirstName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "LastName",
                    Size = 50,
                    Value = LastName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Email",
                    Size = 100,
                    Value = Email ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "IsActive",
                    Value = IsActive ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<UserAccountUpdateResult>("EXEC @returnValue = [dbo].[UserAccountUpdate] @UserAccountId = @UserAccountId, @AccountName = @AccountName, @FirstName = @FirstName, @LastName = @LastName, @Email = @Email, @IsActive = @IsActive, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowDeleteResult>> WorkFlowDeleteAsync(int? WorkFlowId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowDelete] @WorkFlowId = @WorkFlowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowInsertResult>> WorkFlowInsertAsync(string WorkflowName, string WorkFlowObjectName, int? CreatedBy, OutputParameter<int?> WorkFlowId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowId = new SqlParameter
            {
                ParameterName = "WorkFlowId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowId,
                new SqlParameter
                {
                    ParameterName = "WorkflowName",
                    Size = 50,
                    Value = WorkflowName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowObjectName",
                    Size = 255,
                    Value = WorkFlowObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowInsertResult>("EXEC @returnValue = [dbo].[WorkFlowInsert] @WorkFlowId = @WorkFlowId OUTPUT, @WorkflowName = @WorkflowName, @WorkFlowObjectName = @WorkFlowObjectName, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowId.SetValue(parameterWorkFlowId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemDeleteResult>> WorkFlowItemDeleteAsync(int? WorkFlowItemId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowItemDelete] @WorkFlowItemId = @WorkFlowItemId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemInsertResult>> WorkFlowItemInsertAsync(int? WorkFlowId, int? ItemId, int? SubmitterUserAccountId, int? CurrWorkFlowStateId, int? CreatedBy, OutputParameter<int?> WorkFlowItemId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowItemId = new SqlParameter
            {
                ParameterName = "WorkFlowItemId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowItemId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowItemId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ItemId",
                    Value = ItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SubmitterUserAccountId",
                    Value = SubmitterUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrWorkFlowStateId",
                    Value = CurrWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemInsertResult>("EXEC @returnValue = [dbo].[WorkFlowItemInsert] @WorkFlowItemId = @WorkFlowItemId OUTPUT, @WorkFlowId = @WorkFlowId, @ItemId = @ItemId, @SubmitterUserAccountId = @SubmitterUserAccountId, @CurrWorkFlowStateId = @CurrWorkFlowStateId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowItemId.SetValue(parameterWorkFlowItemId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerDeleteResult>> WorkFlowItemOwnerDeleteAsync(int? WorkFlowItemOwnerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemOwnerId",
                    Value = WorkFlowItemOwnerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerDelete] @WorkFlowItemOwnerId = @WorkFlowItemOwnerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerInsertResult>> WorkFlowItemOwnerInsertAsync(int? WorkFlowItemId, int? WorkFlowOwnerGroupId, int? UserAccountId, int? CreatedBy, OutputParameter<int?> WorkFlowItemOwnerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowItemOwnerId = new SqlParameter
            {
                ParameterName = "WorkFlowItemOwnerId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowItemOwnerId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowItemOwnerId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerInsertResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerInsert] @WorkFlowItemOwnerId = @WorkFlowItemOwnerId OUTPUT, @WorkFlowItemId = @WorkFlowItemId, @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @UserAccountId = @UserAccountId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowItemOwnerId.SetValue(parameterWorkFlowItemOwnerId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerSelectAllResult>> WorkFlowItemOwnerSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerSelectByIdResult>> WorkFlowItemOwnerSelectByIdAsync(int? WorkFlowItemOwnerId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemOwnerId",
                    Value = WorkFlowItemOwnerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerSelectById] @WorkFlowItemOwnerId = @WorkFlowItemOwnerId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerSelectByWorkFlowItemIdResult>> WorkFlowItemOwnerSelectByWorkFlowItemIdAsync(int? WorkFlowItemId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerSelectByWorkFlowItemIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerSelectByWorkFlowItemId] @WorkFlowItemId = @WorkFlowItemId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerSelectLastUserByGroupIdResult>> WorkFlowItemOwnerSelectLastUserByGroupIdAsync(int? WorkFlowOwnerGroupId, int? UserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerSelectLastUserByGroupIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerSelectLastUserByGroupId] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @UserAccountId = @UserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemOwnerUpdateResult>> WorkFlowItemOwnerUpdateAsync(int? WorkFlowItemOwnerId, int? WorkFlowItemId, int? WorkFlowOwnerGroupId, int? UserAccountId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemOwnerId",
                    Value = WorkFlowItemOwnerId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemOwnerUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowItemOwnerUpdate] @WorkFlowItemOwnerId = @WorkFlowItemOwnerId, @WorkFlowItemId = @WorkFlowItemId, @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @UserAccountId = @UserAccountId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemSelectAllResult>> WorkFlowItemSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowItemSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemSelectByIdResult>> WorkFlowItemSelectByIdAsync(int? WorkFlowItemId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemSelectById] @WorkFlowItemId = @WorkFlowItemId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemSelectByItemIdResult>> WorkFlowItemSelectByItemIdAsync(int? WorkFlowId, int? ItemId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ItemId",
                    Value = ItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemSelectByItemIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemSelectByItemId] @WorkFlowId = @WorkFlowId, @ItemId = @ItemId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemSelectByWorkflowIdResult>> WorkFlowItemSelectByWorkflowIdAsync(int? WorkFlowId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemSelectByWorkflowIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemSelectByWorkflowId] @WorkFlowId = @WorkFlowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemStateHistoryDeleteResult>> WorkFlowItemStateHistoryDeleteAsync(int? WorkFlowItemStateHistoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemStateHistoryId",
                    Value = WorkFlowItemStateHistoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemStateHistoryDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowItemStateHistoryDelete] @WorkFlowItemStateHistoryId = @WorkFlowItemStateHistoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemStateHistoryInsertResult>> WorkFlowItemStateHistoryInsertAsync(int? WorkFlowItemId, int? WorkFlowStateId, int? UserAccountId, int? CreatedBy, OutputParameter<int?> WorkFlowItemStateHistoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowItemStateHistoryId = new SqlParameter
            {
                ParameterName = "WorkFlowItemStateHistoryId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowItemStateHistoryId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowItemStateHistoryId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemStateHistoryInsertResult>("EXEC @returnValue = [dbo].[WorkFlowItemStateHistoryInsert] @WorkFlowItemStateHistoryId = @WorkFlowItemStateHistoryId OUTPUT, @WorkFlowItemId = @WorkFlowItemId, @WorkFlowStateId = @WorkFlowStateId, @UserAccountId = @UserAccountId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowItemStateHistoryId.SetValue(parameterWorkFlowItemStateHistoryId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemStateHistorySelectAllResult>> WorkFlowItemStateHistorySelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemStateHistorySelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowItemStateHistorySelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemStateHistorySelectByIdResult>> WorkFlowItemStateHistorySelectByIdAsync(int? WorkFlowItemStateHistoryId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemStateHistoryId",
                    Value = WorkFlowItemStateHistoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemStateHistorySelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemStateHistorySelectById] @WorkFlowItemStateHistoryId = @WorkFlowItemStateHistoryId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemStateHistorySelectByWorkFlowItemIdResult>> WorkFlowItemStateHistorySelectByWorkFlowItemIdAsync(int? WorkFlowItemId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemStateHistorySelectByWorkFlowItemIdResult>("EXEC @returnValue = [dbo].[WorkFlowItemStateHistorySelectByWorkFlowItemId] @WorkFlowItemId = @WorkFlowItemId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemStateHistoryUpdateResult>> WorkFlowItemStateHistoryUpdateAsync(int? WorkFlowItemStateHistoryId, int? WorkFlowItemId, int? WorkFlowStateId, int? UserAccountId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemStateHistoryId",
                    Value = WorkFlowItemStateHistoryId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemStateHistoryUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowItemStateHistoryUpdate] @WorkFlowItemStateHistoryId = @WorkFlowItemStateHistoryId, @WorkFlowItemId = @WorkFlowItemId, @WorkFlowStateId = @WorkFlowStateId, @UserAccountId = @UserAccountId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowItemUpdateResult>> WorkFlowItemUpdateAsync(int? WorkFlowItemId, int? WorkFlowId, int? ItemId, int? SubmitterUserAccountId, int? CurrWorkFlowStateId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowItemId",
                    Value = WorkFlowItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ItemId",
                    Value = ItemId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "SubmitterUserAccountId",
                    Value = SubmitterUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CurrWorkFlowStateId",
                    Value = CurrWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowItemUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowItemUpdate] @WorkFlowItemId = @WorkFlowItemId, @WorkFlowId = @WorkFlowId, @ItemId = @ItemId, @SubmitterUserAccountId = @SubmitterUserAccountId, @CurrWorkFlowStateId = @CurrWorkFlowStateId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupDeleteResult>> WorkFlowOwnerGroupDeleteAsync(int? WorkFlowOwnerGroupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupDelete] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupInsertResult>> WorkFlowOwnerGroupInsertAsync(int? WorkFlowId, string OwnerGroupName, int? DefaultUserAccountId, bool? IsDefaultSameAsLast, string Description, int? CreatedBy, OutputParameter<int?> WorkFlowOwnerGroupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowOwnerGroupId = new SqlParameter
            {
                ParameterName = "WorkFlowOwnerGroupId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowOwnerGroupId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowOwnerGroupId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerGroupName",
                    Size = 50,
                    Value = OwnerGroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultUserAccountId",
                    Value = DefaultUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsDefaultSameAsLast",
                    Value = IsDefaultSameAsLast ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupInsertResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupInsert] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId OUTPUT, @WorkFlowId = @WorkFlowId, @OwnerGroupName = @OwnerGroupName, @DefaultUserAccountId = @DefaultUserAccountId, @IsDefaultSameAsLast = @IsDefaultSameAsLast, @Description = @Description, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowOwnerGroupId.SetValue(parameterWorkFlowOwnerGroupId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupSelectAllResult>> WorkFlowOwnerGroupSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupSelectByIdResult>> WorkFlowOwnerGroupSelectByIdAsync(int? WorkFlowOwnerGroupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupSelectById] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupSelectByWorkFlowIdResult>> WorkFlowOwnerGroupSelectByWorkFlowIdAsync(int? WorkFlowId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupSelectByWorkFlowIdResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupSelectByWorkFlowId] @WorkFlowId = @WorkFlowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupSelectCountByNameWorkflowIdResult>> WorkFlowOwnerGroupSelectCountByNameWorkflowIdAsync(int? WorkFlowOwnerGroupId, int? WorkFlowId, string OwnerGroupName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerGroupName",
                    Size = 50,
                    Value = OwnerGroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupSelectCountByNameWorkflowIdResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupSelectCountByNameWorkflowId] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @WorkFlowId = @WorkFlowId, @OwnerGroupName = @OwnerGroupName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUpdateResult>> WorkFlowOwnerGroupUpdateAsync(int? WorkFlowOwnerGroupId, int? WorkFlowId, string OwnerGroupName, int? DefaultUserAccountId, bool? IsDefaultSameAsLast, string Description, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "OwnerGroupName",
                    Size = 50,
                    Value = OwnerGroupName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "DefaultUserAccountId",
                    Value = DefaultUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsDefaultSameAsLast",
                    Value = IsDefaultSameAsLast ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUpdate] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @WorkFlowId = @WorkFlowId, @OwnerGroupName = @OwnerGroupName, @DefaultUserAccountId = @DefaultUserAccountId, @IsDefaultSameAsLast = @IsDefaultSameAsLast, @Description = @Description, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUserAccountDeleteResult>> WorkFlowOwnerGroupUserAccountDeleteAsync(int? WorkFlowOwnerGroupUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupUserAccountId",
                    Value = WorkFlowOwnerGroupUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUserAccountDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUserAccountDelete] @WorkFlowOwnerGroupUserAccountId = @WorkFlowOwnerGroupUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUserAccountInsertResult>> WorkFlowOwnerGroupUserAccountInsertAsync(int? WorkFlowOwnerGroupId, int? UserAccountId, int? CreatedBy, OutputParameter<int?> WorkFlowOwnerGroupUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowOwnerGroupUserAccountId = new SqlParameter
            {
                ParameterName = "WorkFlowOwnerGroupUserAccountId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowOwnerGroupUserAccountId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowOwnerGroupUserAccountId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUserAccountInsertResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUserAccountInsert] @WorkFlowOwnerGroupUserAccountId = @WorkFlowOwnerGroupUserAccountId OUTPUT, @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @UserAccountId = @UserAccountId, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowOwnerGroupUserAccountId.SetValue(parameterWorkFlowOwnerGroupUserAccountId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUserAccountSelectAllResult>> WorkFlowOwnerGroupUserAccountSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUserAccountSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUserAccountSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUserAccountSelectByIdResult>> WorkFlowOwnerGroupUserAccountSelectByIdAsync(int? WorkFlowOwnerGroupUserAccountId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupUserAccountId",
                    Value = WorkFlowOwnerGroupUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUserAccountSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUserAccountSelectById] @WorkFlowOwnerGroupUserAccountId = @WorkFlowOwnerGroupUserAccountId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUserAccountSelectByWorkFlowOwnerGroupIdResult>> WorkFlowOwnerGroupUserAccountSelectByWorkFlowOwnerGroupIdAsync(int? WorkFlowOwnerGroupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUserAccountSelectByWorkFlowOwnerGroupIdResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUserAccountSelectByWorkFlowOwnerGroupId] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowOwnerGroupUserAccountUpdateResult>> WorkFlowOwnerGroupUserAccountUpdateAsync(int? WorkFlowOwnerGroupUserAccountId, int? WorkFlowOwnerGroupId, int? UserAccountId, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupUserAccountId",
                    Value = WorkFlowOwnerGroupUserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UserAccountId",
                    Value = UserAccountId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowOwnerGroupUserAccountUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowOwnerGroupUserAccountUpdate] @WorkFlowOwnerGroupUserAccountId = @WorkFlowOwnerGroupUserAccountId, @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @UserAccountId = @UserAccountId, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowSelectAllResult>> WorkFlowSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowSelectByIdResult>> WorkFlowSelectByIdAsync(int? WorkFlowId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowSelectById] @WorkFlowId = @WorkFlowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowSelectByObjectNameResult>> WorkFlowSelectByObjectNameAsync(string WorkFlowObjectName, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowObjectName",
                    Size = 255,
                    Value = WorkFlowObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowSelectByObjectNameResult>("EXEC @returnValue = [dbo].[WorkFlowSelectByObjectName] @WorkFlowObjectName = @WorkFlowObjectName", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateDeleteResult>> WorkFlowStateDeleteAsync(int? WorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowStateDelete] @WorkFlowStateId = @WorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateInsertResult>> WorkFlowStateInsertAsync(int? WorkFlowId, string StateName, string Description, int? WorkFlowOwnerGroupId, bool? IsOwnerSubmitter, int? CreatedBy, OutputParameter<int?> WorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowStateId = new SqlParameter
            {
                ParameterName = "WorkFlowStateId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowStateId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowStateId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StateName",
                    Size = 50,
                    Value = StateName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsOwnerSubmitter",
                    Value = IsOwnerSubmitter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateInsertResult>("EXEC @returnValue = [dbo].[WorkFlowStateInsert] @WorkFlowStateId = @WorkFlowStateId OUTPUT, @WorkFlowId = @WorkFlowId, @StateName = @StateName, @Description = @Description, @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @IsOwnerSubmitter = @IsOwnerSubmitter, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowStateId.SetValue(parameterWorkFlowStateId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertyDeleteResult>> WorkFlowStatePropertyDeleteAsync(int? WorkFlowStatePropertyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStatePropertyId",
                    Value = WorkFlowStatePropertyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertyDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertyDelete] @WorkFlowStatePropertyId = @WorkFlowStatePropertyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertyDeleteByWorkFlowStateIdResult>> WorkFlowStatePropertyDeleteByWorkFlowStateIdAsync(int? WorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertyDeleteByWorkFlowStateIdResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertyDeleteByWorkFlowStateId] @WorkFlowStateId = @WorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertyInsertResult>> WorkFlowStatePropertyInsertAsync(int? WorkFlowStateId, string PropertyName, bool? Required, bool? ReadOnly, int? CreatedBy, OutputParameter<int?> WorkFlowStatePropertyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowStatePropertyId = new SqlParameter
            {
                ParameterName = "WorkFlowStatePropertyId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowStatePropertyId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowStatePropertyId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyName",
                    Size = 255,
                    Value = PropertyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Required",
                    Value = Required ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ReadOnly",
                    Value = ReadOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertyInsertResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertyInsert] @WorkFlowStatePropertyId = @WorkFlowStatePropertyId OUTPUT, @WorkFlowStateId = @WorkFlowStateId, @PropertyName = @PropertyName, @Required = @Required, @ReadOnly = @ReadOnly, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowStatePropertyId.SetValue(parameterWorkFlowStatePropertyId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertySelectAllResult>> WorkFlowStatePropertySelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertySelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertySelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertySelectByIdResult>> WorkFlowStatePropertySelectByIdAsync(int? WorkFlowStatePropertyId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStatePropertyId",
                    Value = WorkFlowStatePropertyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertySelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertySelectById] @WorkFlowStatePropertyId = @WorkFlowStatePropertyId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertySelectByWorkFlowStateIdResult>> WorkFlowStatePropertySelectByWorkFlowStateIdAsync(int? WorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertySelectByWorkFlowStateIdResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertySelectByWorkFlowStateId] @WorkFlowStateId = @WorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStatePropertyUpdateResult>> WorkFlowStatePropertyUpdateAsync(int? WorkFlowStatePropertyId, int? WorkFlowStateId, string PropertyName, bool? Required, bool? ReadOnly, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStatePropertyId",
                    Value = WorkFlowStatePropertyId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PropertyName",
                    Size = 255,
                    Value = PropertyName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Required",
                    Value = Required ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "ReadOnly",
                    Value = ReadOnly ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStatePropertyUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowStatePropertyUpdate] @WorkFlowStatePropertyId = @WorkFlowStatePropertyId, @WorkFlowStateId = @WorkFlowStateId, @PropertyName = @PropertyName, @Required = @Required, @ReadOnly = @ReadOnly, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateSelectAllResult>> WorkFlowStateSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowStateSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateSelectByIdResult>> WorkFlowStateSelectByIdAsync(int? WorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowStateSelectById] @WorkFlowStateId = @WorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateSelectByWorkFlowIdResult>> WorkFlowStateSelectByWorkFlowIdAsync(int? WorkFlowId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateSelectByWorkFlowIdResult>("EXEC @returnValue = [dbo].[WorkFlowStateSelectByWorkFlowId] @WorkFlowId = @WorkFlowId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateSelectCountByWorkFlowOwnerGroupIdResult>> WorkFlowStateSelectCountByWorkFlowOwnerGroupIdAsync(int? WorkFlowOwnerGroupId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateSelectCountByWorkFlowOwnerGroupIdResult>("EXEC @returnValue = [dbo].[WorkFlowStateSelectCountByWorkFlowOwnerGroupId] @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowStateUpdateResult>> WorkFlowStateUpdateAsync(int? WorkFlowStateId, int? WorkFlowId, string StateName, string Description, int? WorkFlowOwnerGroupId, bool? IsOwnerSubmitter, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowStateId",
                    Value = WorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "StateName",
                    Size = 50,
                    Value = StateName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Description",
                    Size = 255,
                    Value = Description ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowOwnerGroupId",
                    Value = WorkFlowOwnerGroupId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "IsOwnerSubmitter",
                    Value = IsOwnerSubmitter ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Bit,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowStateUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowStateUpdate] @WorkFlowStateId = @WorkFlowStateId, @WorkFlowId = @WorkFlowId, @StateName = @StateName, @Description = @Description, @WorkFlowOwnerGroupId = @WorkFlowOwnerGroupId, @IsOwnerSubmitter = @IsOwnerSubmitter, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowTransitionDeleteResult>> WorkFlowTransitionDeleteAsync(int? WorkFlowTransitionId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowTransitionId",
                    Value = WorkFlowTransitionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowTransitionDeleteResult>("EXEC @returnValue = [dbo].[WorkFlowTransitionDelete] @WorkFlowTransitionId = @WorkFlowTransitionId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowTransitionInsertResult>> WorkFlowTransitionInsertAsync(int? WorkFlowId, string TransitionName, int? FromWorkFlowStateId, int? ToWorkFlowStateId, string PostTransitionMethodName, int? CreatedBy, OutputParameter<int?> WorkFlowTransitionId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterWorkFlowTransitionId = new SqlParameter
            {
                ParameterName = "WorkFlowTransitionId",
                Direction = System.Data.ParameterDirection.InputOutput,
                Value = WorkFlowTransitionId?._value ?? Convert.DBNull,
                SqlDbType = System.Data.SqlDbType.Int,
            };
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterWorkFlowTransitionId,
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransitionName",
                    Size = 50,
                    Value = TransitionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromWorkFlowStateId",
                    Value = FromWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ToWorkFlowStateId",
                    Value = ToWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PostTransitionMethodName",
                    Size = 255,
                    Value = PostTransitionMethodName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "CreatedBy",
                    Value = CreatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowTransitionInsertResult>("EXEC @returnValue = [dbo].[WorkFlowTransitionInsert] @WorkFlowTransitionId = @WorkFlowTransitionId OUTPUT, @WorkFlowId = @WorkFlowId, @TransitionName = @TransitionName, @FromWorkFlowStateId = @FromWorkFlowStateId, @ToWorkFlowStateId = @ToWorkFlowStateId, @PostTransitionMethodName = @PostTransitionMethodName, @CreatedBy = @CreatedBy", sqlParameters, cancellationToken);

            WorkFlowTransitionId.SetValue(parameterWorkFlowTransitionId.Value);
            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowTransitionSelectAllResult>> WorkFlowTransitionSelectAllAsync(OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowTransitionSelectAllResult>("EXEC @returnValue = [dbo].[WorkFlowTransitionSelectAll]", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowTransitionSelectByFromStateIdResult>> WorkFlowTransitionSelectByFromStateIdAsync(int? FromWorkFlowStateId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "FromWorkFlowStateId",
                    Value = FromWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowTransitionSelectByFromStateIdResult>("EXEC @returnValue = [dbo].[WorkFlowTransitionSelectByFromStateId] @FromWorkFlowStateId = @FromWorkFlowStateId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowTransitionSelectByIdResult>> WorkFlowTransitionSelectByIdAsync(int? WorkFlowTransitionId, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowTransitionId",
                    Value = WorkFlowTransitionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowTransitionSelectByIdResult>("EXEC @returnValue = [dbo].[WorkFlowTransitionSelectById] @WorkFlowTransitionId = @WorkFlowTransitionId", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowTransitionUpdateResult>> WorkFlowTransitionUpdateAsync(int? WorkFlowTransitionId, int? WorkFlowId, string TransitionName, int? FromWorkFlowStateId, int? ToWorkFlowStateId, string PostTransitionMethodName, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowTransitionId",
                    Value = WorkFlowTransitionId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "TransitionName",
                    Size = 50,
                    Value = TransitionName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "FromWorkFlowStateId",
                    Value = FromWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "ToWorkFlowStateId",
                    Value = ToWorkFlowStateId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "PostTransitionMethodName",
                    Size = 255,
                    Value = PostTransitionMethodName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowTransitionUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowTransitionUpdate] @WorkFlowTransitionId = @WorkFlowTransitionId, @WorkFlowId = @WorkFlowId, @TransitionName = @TransitionName, @FromWorkFlowStateId = @FromWorkFlowStateId, @ToWorkFlowStateId = @ToWorkFlowStateId, @PostTransitionMethodName = @PostTransitionMethodName, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<WorkFlowUpdateResult>> WorkFlowUpdateAsync(int? WorkFlowId, string WorkflowName, string WorkFlowObjectName, int? UpdatedBy, byte[] RowVersion, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "WorkFlowId",
                    Value = WorkFlowId ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "WorkflowName",
                    Size = 50,
                    Value = WorkflowName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "WorkFlowObjectName",
                    Size = 255,
                    Value = WorkFlowObjectName ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "UpdatedBy",
                    Value = UpdatedBy ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "RowVersion",
                    Value = RowVersion ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Timestamp,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<WorkFlowUpdateResult>("EXEC @returnValue = [dbo].[WorkFlowUpdate] @WorkFlowId = @WorkFlowId, @WorkflowName = @WorkflowName, @WorkFlowObjectName = @WorkFlowObjectName, @UpdatedBy = @UpdatedBy, @RowVersion = @RowVersion", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
