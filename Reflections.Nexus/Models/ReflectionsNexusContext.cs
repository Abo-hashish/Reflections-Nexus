// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Reflections.Nexus.Models;

public partial class ReflectionsNexusContext : DbContext
{
    private readonly IConfiguration Configuration;
   
    public ReflectionsNexusContext()
    {
       
    }

    public ReflectionsNexusContext(DbContextOptions<ReflectionsNexusContext> options , IConfiguration configuration)
        : base(options)
    {
        this.Configuration = configuration;
    }

    public virtual DbSet<City> City { get; set; }

    public virtual DbSet<Company> Company { get; set; }

    public virtual DbSet<CompanyFiles> Company_Files { get; set; }

    public virtual DbSet<ContractingStatus> Contracting_status { get; set; }

    public virtual DbSet<Country> Country { get; set; }

    public virtual DbSet<Department> Department { get; set; }

    public virtual DbSet<Employees> Employees { get; set; }

    public virtual DbSet<EmployeesFiles> Employees_Files { get; set; }

    public virtual DbSet<FileType> File_Type { get; set; }

    public virtual DbSet<Gender> Gender { get; set; }

    public virtual DbSet<Headcount> Head_count { get; set; }

    public virtual DbSet<HeadCountType> Head_count_Type { get; set; }

    public virtual DbSet<JopTitle> Jop_Title { get; set; }

    public virtual DbSet<Users> Users { get; set; }

    public virtual DbSet<WorkingModel> Working_model { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
     {
        
        if (!optionsBuilder.IsConfigured)
        {
            optionsBuilder.UseSqlServer(Configuration.GetConnectionString("Default"));
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<CompanyFiles>(entity =>
        {
            entity.HasOne(d => d.Company).WithMany(p => p.Company_Files)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company_Files_Company");

            entity.HasOne(d => d.File_type).WithMany(p => p.Company_Files)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Company_Files_File_Type");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasOne(d => d.Manager).WithMany(p => p.Department)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Department_Employees");
        });

        modelBuilder.Entity<Employees>(entity =>
        {
            entity.HasOne(d => d.City).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_City");

            entity.HasOne(d => d.Country).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Country");

            entity.HasOne(d => d.Dep).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Department");

            entity.HasOne(d => d.Direct_Manager).WithMany(p => p.InverseDirect_Manager)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Employees");

            entity.HasOne(d => d.Gender).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Gender");

            entity.HasOne(d => d.Jop_Title).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Jop_Title");

            entity.HasOne(d => d.User).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Users");
        });

        modelBuilder.Entity<EmployeesFiles>(entity =>
        {
            entity.HasOne(d => d.Employee).WithMany(p => p.Employees_Files)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Files_Employees");

            entity.HasOne(d => d.File_Type).WithMany(p => p.Employees_Files)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Employees_Files_File_Type");
        });

        modelBuilder.Entity<Headcount>(entity =>
        {
            entity.HasOne(d => d.Contracting_status).WithMany(p => p.Head_count)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Contracting_status");

            entity.HasOne(d => d.Emp).WithMany(p => p.Head_countEmp)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Employees");

            entity.HasOne(d => d.From_Working_model).WithMany(p => p.Head_countFrom_Working_model)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Working_model");

            entity.HasOne(d => d.From_direct_manager).WithMany(p => p.Head_countFrom_direct_manager)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Employees1");

            entity.HasOne(d => d.From_jop_title).WithMany(p => p.Head_countFrom_jop_title)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Jop_Title");

            entity.HasOne(d => d.Gender).WithMany(p => p.Head_count)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Gender");

            entity.HasOne(d => d.To_Working_model).WithMany(p => p.Head_countTo_Working_model)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Working_model1");

            entity.HasOne(d => d.To_direct_manager).WithMany(p => p.Head_countTo_direct_manager)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Employees2");

            entity.HasOne(d => d.To_jop_title).WithMany(p => p.Head_countTo_jop_title)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Jop_Title1");

            entity.HasOne(d => d.Type).WithMany(p => p.Head_count)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Head_count_Type");

            entity.HasOne(d => d.User).WithMany(p => p.Head_count)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Head_count_Users");
        });

        modelBuilder.Entity<JopTitle>(entity =>
        {
            entity.HasOne(d => d.Dep).WithMany(p => p.Jop_Title)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Jop_Title_Department");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}